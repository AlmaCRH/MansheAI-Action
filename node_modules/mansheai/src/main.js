import axios from "axios";
import { Octokit } from "octokit";
import branchName from "current-git-branch";

const octokit = new Octokit({ auth: githubToken });

const getGitDiffAsync = async ({ githubUser, githubRepo }) => {
  try {
    const currentBranch = branchName();
    const commits = await octokit.request("GET /repos/{owner}/{repo}/commits", {
      owner: githubUser,
      repo: githubRepo,
      headers: {
        "X-GitHub-Api-Version": "2022-11-28",
      },
    });
    const latestCommitSha = commits.data[0].sha;
    const commitDetails = await octokit.request(
      "GET /repos/{owner}/{repo}/commits/{commit_sha}",
      {
        owner: githubUser,
        repo: githubRepo,
        commit_sha: latestCommitSha,
      }
    );
    const actualChanges = {};
    commitDetails.data.files.forEach((file) => {
      actualChanges[file.filename] = file.patch;
    });

    const treeRes = await octokit.request(
      "GET /repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=1",
      {
        owner: githubUser,
        repo: githubRepo,
        tree_sha: currentBranch,
      }
    );
    const keyChanges = Object.keys(actualChanges);
    const filterList = treeRes.data.tree.filter((tree) =>
      keyChanges.includes(tree.path)
    );

    const contentObj = {};

    for (let i = 0; i < filterList.length; i++) {
      const content = await octokit.request(
        "GET /repos/{owner}/{repo}/contents/{path}",
        {
          owner: githubUser,
          repo: githubRepo,
          path: filterList[i].path,
          ref: currentBranch,
          headers: {
            "X-GitHub-Api-Version": "2022-11-28",
            accept: "application/vnd.github+json",
          },
        }
      );
      contentObj[filterList[i].path] = Buffer.from(
        content.data.content,
        "base64"
      ).toString();
    }

    return {
      diff: actualChanges,
      sha: latestCommitSha,
      ogFiles: contentObj,
    };
  } catch (error) {
    console.error(error);
  }
};

const reviewWithAi = async ({ aikey, diff, ogFiles }) => {
  const ogFilesFormatted = Object.entries(ogFiles)
    .map(([filename, content]) => `// File: ${filename}\n${content}`)
    .join("\n\n");

  const diffFormatted = Object.entries(diff)
    .map(([filename, patch]) => `// File: ${filename}\n${patch}`)
    .join("\n\n");
  const prompt = `
    You're a senior software engineer with deep expertise in clean code, software architecture, and development best practices. You act like a CTO reviewing code.

I'll give you:
- An object with the original files, the key is the name of the file and the value the original content of the file.
- An object with the git diffs, the key is the filename and value the diff.

Your tasks:
1. Apply the diff to the original file to understand the updated version.
2. Review the updated file and provide detailed feedback:
   - Is the code clean and readable?
   - Are best practices followed?
   - Are there bugs, redundancies, or potential issues?
   - What can be improved?
3. If improvements are possible, show the updated version of the code with your suggestions implemented.

⚠️ Do not explain the diff line-by-line — focus on giving constructive, high-level feedback like a CTO would.

---

Original file:
\`\`\`js
${ogFilesFormatted}
\`\`\`

Diff patch:
\`\`\`diff
${diffFormatted}
\`\`\`

Now apply the patch, review the updated result, and give your feedback and improved code if needed, also add comments where you made changes.
    `;
  try {
    const response = await axios.post(
      "https://codestral.mistral.ai/v1/chat/completions",
      {
        model: "codestral-latest",
        messages: [
          {
            role: "user",
            content: prompt,
          },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${aikey}`,
          "Content-Type": "application/json",
        },
      }
    );
    return response.data.choices[0].message.content;
  } catch (err) {
    console.error(err);
    return;
  }
};

const runMansheAI = async ({aikey, githubUser, githubRepo }) => {
  const { diff, sha, ogFiles } = await getGitDiffAsync(
    githubUser,
    githubRepo
  );
  if (!diff) {
    console.log("No hay cambios para revisar.");
    return;
  }
  const feedback = await reviewWithAi({ aikey, diff, ogFiles });
  await octokit.request(
    "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments",
    {
      owner: githubUser,
      repo: githubRepo,
      commit_sha: sha,
      body: feedback,
      headers: {
        "X-GitHub-Api-Version": "2022-11-28",
      },
    }
  );
};

export default runMansheAI;
